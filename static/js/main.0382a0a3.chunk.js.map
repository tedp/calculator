{"version":3,"sources":["logo.svg","components/Calculator/common/enums.js","components/Calculator/ResultDisplay/ResultDisplay.js","components/Calculator/Button/Button.js","components/Calculator/CalculatorInput/CalculatorInput.js","components/Calculator/functions.js","components/Calculator/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","KeyType","Object","freeze","numeric","dot","operator","clear","result","DisplayState","decimal","CalcState","resulted","cleared","input","ResultDisplay","displayValue","className","Button","handleClick","props","onClick","value","this","React","Component","CalculatorInput","buttons","map","button","key","keyValue","onInput","topPanelButtons","keyType","centrePanelButtons","topPanelButtonDivs","createButtons","centrePanelButtonDivs","id","calculateState","state","validCombinations","display","calculate","operators","numbers","calcFunction","workingOperator","indexOf","splice","inputString","String","split","replace","leftNumber","rightNumber","parseFloat","calculateResult","keyTypes","displayStates","calcState","displayState","calulateResultState","length","slice","clearLast","initialState","combination","includes","currentDisplayState","calculateDisplayState","concat","Calculator","handleInput","bind","lastKeyType","setState","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,kC,0NCArCC,G,MAAUC,OAAOC,OAAO,CAC5BC,QAAS,UACTC,IAAK,MACLC,SAAU,WACVC,MAAO,QACPC,OAAQ,YAGJC,EAAeP,OAAOC,OAAO,CACjCC,QAAS,UACTM,QAAS,UACTL,IAAK,MACLC,SAAU,aAGNK,EAAYT,OAAOC,OAAO,CAC9BS,SAAU,WACVC,QAAS,UACTC,MAAO,U,MCXMC,MAJf,YAA0C,IAAjBC,EAAgB,EAAhBA,aACvB,OAAO,yBAAKC,UAAU,iBAAiBD,ICa1BE,G,wNAbbC,YAAc,WACZ,EAAKC,MAAMC,QAAQ,EAAKD,MAAME,Q,uDAI9B,OACE,yBAAKL,UAAU,SAASI,QAASE,KAAKJ,aACnCI,KAAKH,MAAME,W,GARCE,IAAMC,YCyDZC,E,4KAtDCC,GAAU,IAAD,OACrB,OAAOA,EAAQC,KAAI,SAACC,GAAD,OACjB,kBAAC,EAAD,CACEC,IAAKD,EAAOE,SACZT,MAAOO,EAAOE,SACdV,QAAS,kBAAM,EAAKD,MAAMY,QAAQH,W,+BAK9B,IAAD,OACDI,EAAkB,CACtB,CAAEF,SAAU,IAAKG,QAASjC,EAAQK,UAClC,CAAEyB,SAAU,IAAKG,QAASjC,EAAQK,UAClC,CAAEyB,SAAU,OAAUG,QAASjC,EAAQK,UACvC,CAAEyB,SAAU,OAAUG,QAASjC,EAAQK,WAEnC6B,EAAqB,CACzB,CAAEJ,SAAU,IAAKG,QAASjC,EAAQG,SAClC,CAAE2B,SAAU,IAAKG,QAASjC,EAAQG,SAClC,CAAE2B,SAAU,IAAKG,QAASjC,EAAQG,SAClC,CAAE2B,SAAU,IAAKG,QAASjC,EAAQG,SAClC,CAAE2B,SAAU,IAAKG,QAASjC,EAAQG,SAClC,CAAE2B,SAAU,IAAKG,QAASjC,EAAQG,SAClC,CAAE2B,SAAU,IAAKG,QAASjC,EAAQG,SAClC,CAAE2B,SAAU,IAAKG,QAASjC,EAAQG,SAClC,CAAE2B,SAAU,IAAKG,QAASjC,EAAQG,SAClC,CAAE2B,SAAU,IAAKG,QAASjC,EAAQG,SAClC,CAAE2B,SAAU,IAAKG,QAASjC,EAAQI,KAClC,CAAE0B,SAAU,IAAKG,QAASjC,EAAQM,QAG9B6B,EAAqBb,KAAKc,cAAcJ,GACxCK,EAAwBf,KAAKc,cAAcF,GAEjD,OACE,yBAAKlB,UAAU,mBACb,yBAAKA,UAAU,aACZmB,GAEH,yBAAKnB,UAAU,gBACZqB,GAEH,yBAAKrB,UAAU,eAAesB,GAAG,UAC/B,kBAAC,EAAD,CACEjB,MAAM,IACND,QAAS,kBAAM,EAAKD,MAAMY,QAAQ,CAAED,SAAU,IAAKG,QAASjC,EAAQO,kB,GA/ClDgB,IAAMC,W,qBCkJrBe,MArJf,SAAwBC,EAAOV,EAAUG,GAiHvC,IAAMQ,EAAoB,CACxBjC,EAAaL,QAAUH,EAAQG,QAC/BK,EAAaL,QAAUH,EAAQK,SAC/BG,EAAaL,QAAUH,EAAQI,IAE/BI,EAAaJ,IAAMJ,EAAQG,QAE3BK,EAAaC,QAAUT,EAAQG,QAC/BK,EAAaC,QAAUT,EAAQK,SAE/BG,EAAaH,SAAWL,EAAQG,SAGlC,GAAI8B,IAAYjC,EAAQO,OACtB,OApDF,SAA6BiC,GA0B3B,IAAME,EAzBN,SAAyB7B,GACvB,SAAS8B,EAAUtC,EAAUuC,EAAWC,EAASC,GAE/C,IADA,IAAIC,EAAkBH,EAAUI,QAAQ3C,IACZ,IAArB0C,GAAwB,CAC7B,IAAMxC,EAASuC,EAAaD,EAAQE,GAAkBF,EAAQE,EAAkB,IAChFF,EAAQI,OAAOF,EAAiB,EAAGxC,GACnCqC,EAAUK,OAAOF,EAAiB,GAClCA,EAAkBH,EAAUI,QAAQ3C,IAIxC,IAAM6C,EAAcC,OAAOtC,GACrBgC,EAAUK,EAAYE,MAAM,mBAC5BR,EAAYM,EAAYG,QAAQ,YAAa,IAAID,MAAM,IAS7D,OANAT,EAAU,OAAKC,EAAWC,GAAS,SAACS,EAAYC,GAAb,OAA6BD,EAAaC,KAC7EZ,EAAU,OAAKC,EAAWC,GAAS,SAACS,EAAYC,GAAb,OAA6BD,EAAaC,KAC7EZ,EAAU,IAAKC,EAAWC,GAAS,SAACS,EAAYC,GAAb,OAA6BD,EAAaC,KAE7EZ,EAAU,IAAKC,EAAWC,GAAS,SAACS,EAAYC,GAAb,OAA6BC,WAAWF,GAAcE,WAAWD,MAE7FV,EAAQ,GAGDY,CAAgBjB,EAAMjC,OAAOmC,SACvCgB,EAAW,CAAC1D,EAAQG,SACpBwD,EAAgB,CAACnD,EAAaL,SAEpC,OAAO,eACFqC,EADL,CAEEjC,OAAQ,CAAEmC,UAASgB,WAAUC,iBAC7BC,UAAWlD,EAAUC,SACrBkD,aAAcrD,EAAaL,UAkBtB2D,CAAoBtB,GAE7B,GAAIP,IAAYjC,EAAQM,MACtB,OApFF,SAAmBkC,GACjB,IAAIE,EACAgB,EACAC,EACAC,EACAC,EAgBJ,OAdIrB,EAAMjC,OAAOmC,QAAQqB,OAAS,GAChCrB,EAAUF,EAAMjC,OAAOmC,QAAQsB,MAAM,GAAI,GACzCN,EAAWlB,EAAMjC,OAAOmD,SAASM,MAAM,GAAI,GAC3CJ,EAAYpB,EAAMoB,UAElBC,GADAF,EAAgBnB,EAAMjC,OAAOoD,cAAcK,MAAM,GAAI,IACxBL,EAAcI,OAAS,KAEpDrB,EAAU,IACVgB,EAAW,CAAC1D,EAAQG,SACpByD,EAAYlD,EAAUE,QAEtB+C,EAAgB,CADhBE,EAAerD,EAAaL,UAIvB,eACFqC,EADL,CAEEjC,OAAQ,CAAEmC,UAASgB,WAAUC,iBAC7BC,YACAC,iBA2DKI,CAAUzB,GAEnB,IACGA,EAAMoB,YAAclD,EAAUE,SAC1B4B,EAAMoB,YAAclD,EAAUC,WAChCsB,IAAYjC,EAAQG,QAEvB,OArHF,SAAsBqC,EAAOV,GAC3B,OAAO,eACFU,EADL,CAEEjC,OAAQ,CACNmC,QAASZ,EACT4B,SAAU,CAAC1D,EAAQG,SACnBwD,cAAe,CAACnD,EAAaL,UAE/ByD,UAAWlD,EAAUG,MACrBgD,aAAcrD,EAAaL,UA4GtB+D,CAAa1B,EAAOV,GAG7B,IAAMqC,EAAc3B,EAAMqB,aAAe5B,EAEzC,OAAIQ,EAAkB2B,SAASD,GA7G/B,SAAgB3B,EAAOV,EAAUG,GAC/B,IAAMS,EAAWF,EAAMjC,OAAOmC,SAAWZ,EACnC4B,EAAQ,sBAAOlB,EAAMjC,OAAOmD,UAApB,CAA8BzB,IACtC4B,EAnCR,SAA+BQ,EAAqBpC,GAAU,IAAD,EAgB3D,OAfuB,mBACpBzB,EAAaL,QAAUH,EAAQG,QAAUK,EAAaL,SADlC,cAEpBK,EAAaL,QAAUH,EAAQK,SAAWG,EAAaH,UAFnC,cAGpBG,EAAaL,QAAUH,EAAQI,IAAMI,EAAaJ,KAH9B,cAKpBI,EAAaJ,IAAMJ,EAAQG,QAAUK,EAAaC,SAL9B,cAOpBD,EAAaC,QAAUT,EAAQG,QAAUK,EAAaC,SAPlC,cAQpBD,EAAaC,QAAUT,EAAQK,SAAWG,EAAaH,UARnC,cAUpBG,EAAaH,SAAWL,EAAQG,QAAUK,EAAaL,SAVnC,GAaHkE,EAAsBpC,GAqBrBqC,CAAsB9B,EAAMqB,aAAc5B,GACzD0B,EAAa,sBAAOnB,EAAMjC,OAAOoD,eAApB,CAAmCE,IACtD,OAAO,eACFrB,EADL,CAEEqB,eACAtD,OAAQ,CAAEmC,UAASgB,WAAUC,iBAC7BC,UAAWlD,EAAUG,QAqGhB0D,CAAO/B,EAAOV,EAAUG,GAG1BO,GChHMgC,E,kDA3Bb,WAAYrD,GAAQ,IAAD,8BACjB,cAAMA,IACDsD,YAAc,EAAKA,YAAYC,KAAjB,gBAEnB,EAAKlC,MAAQ,CACXjC,OAAQ,CAAEmC,QAAS,IAAKgB,SAAU,CAAC1D,EAAQG,SAAUwD,cAAe,CAACnD,EAAaL,UAClFyD,UAAWlD,EAAUE,QACrBiD,aAAcrD,EAAaL,QAC3BwE,YAAa3E,EAAQG,SARN,E,wDAYPyB,GACV,IAAMY,EAAQD,EAAejB,KAAKkB,MAAOZ,EAAOE,SAAUF,EAAOK,SACjEX,KAAKsD,SAASpC,K,+BAId,OACE,yBAAKxB,UAAU,cACb,kBAAC,EAAD,CAAeD,aAAcO,KAAKkB,MAAMjC,OAAOmC,UAC/C,kBAAC,EAAD,CAAiBX,QAAST,KAAKmD,mB,GAtBdlD,IAAMC,WCGhBqD,MANf,WACE,OACE,kBAAC,EAAD,OCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0382a0a3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const KeyType = Object.freeze({\n  numeric: 'numeric',\n  dot: 'dot',\n  operator: 'operator',\n  clear: 'clear',\n  result: 'result',\n});\n\nconst DisplayState = Object.freeze({\n  numeric: 'numeric',\n  decimal: 'decimal',\n  dot: 'dot',\n  operator: 'operator',\n});\n\nconst CalcState = Object.freeze({\n  resulted: 'resulted',\n  cleared: 'cleared',\n  input: 'input',\n});\n\nexport { KeyType, CalcState, DisplayState };\n","import React from 'react';\nimport './ResultDisplay.scss';\n\nfunction ResultDisplay({ displayValue }) {\n  return <div className=\"ResultDisplay\">{displayValue}</div>;\n}\n\nexport default ResultDisplay;\n","import React from 'react';\nimport './Button.scss';\n\nclass Button extends React.Component {\n  handleClick = () => {\n    this.props.onClick(this.props.value);\n  }\n\n  render() {\n    return (\n      <div className=\"Button\" onClick={this.handleClick}>\n        {this.props.value}\n      </div>\n    );\n  }\n}\n\nexport default Button\n","import React from 'react';\nimport './CalculatorInput.scss';\nimport { KeyType } from '../common/enums';\nimport Button from '../Button/Button';\n\nclass CalculatorInput extends React.Component {\n  createButtons(buttons) {\n    return buttons.map((button) => (\n      <Button\n        key={button.keyValue}\n        value={button.keyValue}\n        onClick={() => this.props.onInput(button)}\n      />\n    ));\n  }\n\n  render() {\n    const topPanelButtons = [\n      { keyValue: '+', keyType: KeyType.operator },\n      { keyValue: '-', keyType: KeyType.operator },\n      { keyValue: '\\u00d7', keyType: KeyType.operator },\n      { keyValue: '\\u00f7', keyType: KeyType.operator },\n    ];\n    const centrePanelButtons = [\n      { keyValue: '9', keyType: KeyType.numeric },\n      { keyValue: '8', keyType: KeyType.numeric },\n      { keyValue: '7', keyType: KeyType.numeric },\n      { keyValue: '6', keyType: KeyType.numeric },\n      { keyValue: '5', keyType: KeyType.numeric },\n      { keyValue: '4', keyType: KeyType.numeric },\n      { keyValue: '3', keyType: KeyType.numeric },\n      { keyValue: '2', keyType: KeyType.numeric },\n      { keyValue: '1', keyType: KeyType.numeric },\n      { keyValue: '0', keyType: KeyType.numeric },\n      { keyValue: '.', keyType: KeyType.dot },\n      { keyValue: 'C', keyType: KeyType.clear },\n    ];\n\n    const topPanelButtonDivs = this.createButtons(topPanelButtons);\n    const centrePanelButtonDivs = this.createButtons(centrePanelButtons);\n\n    return (\n      <div className=\"CalculatorInput\">\n        <div className=\"top-panel\">\n          {topPanelButtonDivs}\n        </div>\n        <div className=\"centre-panel\">\n          {centrePanelButtonDivs}\n        </div>\n        <div className=\"bottom-panel\" id=\"result\">\n          <Button\n            value=\"=\"\n            onClick={() => this.props.onInput({ keyValue: '=', keyType: KeyType.result })}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CalculatorInput;\n","import { CalcState, KeyType, DisplayState } from './common/enums';\n\nfunction calculateState(state, keyValue, keyType) {\n  function calculateDisplayState(currentDisplayState, keyType) {\n    const validCombinations = {\n      [DisplayState.numeric + KeyType.numeric]: DisplayState.numeric,\n      [DisplayState.numeric + KeyType.operator]: DisplayState.operator,\n      [DisplayState.numeric + KeyType.dot]: DisplayState.dot,\n\n      [DisplayState.dot + KeyType.numeric]: DisplayState.decimal,\n\n      [DisplayState.decimal + KeyType.numeric]: DisplayState.decimal,\n      [DisplayState.decimal + KeyType.operator]: DisplayState.operator,\n\n      [DisplayState.operator + KeyType.numeric]: DisplayState.numeric,\n    };\n\n    const combination = currentDisplayState + keyType;\n\n    return validCombinations[combination];\n  }\n\n  function initialState(state, keyValue) {\n    return {\n      ...state,\n      result: {\n        display: keyValue,\n        keyTypes: [KeyType.numeric],\n        displayStates: [DisplayState.numeric],\n      },\n      calcState: CalcState.input,\n      displayState: DisplayState.numeric,\n    };\n  }\n\n  function concat(state, keyValue, keyType) {\n    const display = (state.result.display += keyValue);\n    const keyTypes = [...state.result.keyTypes, keyType];\n    const displayState = calculateDisplayState(state.displayState, keyType);\n    const displayStates = [...state.result.displayStates, displayState];\n    return {\n      ...state,\n      displayState,\n      result: { display, keyTypes, displayStates },\n      calcState: CalcState.input,\n    };\n  }\n\n  function clearLast(state) {\n    let display;\n    let keyTypes;\n    let displayStates;\n    let calcState;\n    let displayState;\n\n    if (state.result.display.length > 1) {\n      display = state.result.display.slice(0, -1);\n      keyTypes = state.result.keyTypes.slice(0, -1);\n      calcState = state.calcState;\n      displayStates = state.result.displayStates.slice(0, -1);\n      displayState = displayStates[displayStates.length - 1];\n    } else {\n      display = '0';\n      keyTypes = [KeyType.numeric];\n      calcState = CalcState.cleared;\n      displayState = DisplayState.numeric;\n      displayStates = [displayState];\n    }\n\n    return {\n      ...state,\n      result: { display, keyTypes, displayStates },\n      calcState,\n      displayState,\n    };\n  }\n\n  function calulateResultState(state) {\n    function calculateResult(input) {\n      function calculate(operator, operators, numbers, calcFunction) {\n        let workingOperator = operators.indexOf(operator);\n        while (workingOperator !== -1) {\n          const result = calcFunction(numbers[workingOperator], numbers[workingOperator + 1]);\n          numbers.splice(workingOperator, 2, result);\n          operators.splice(workingOperator, 1);\n          workingOperator = operators.indexOf(operator);\n        }\n      }\n\n      const inputString = String(input);\n      const numbers = inputString.split(/\\+|-|×|÷/g);\n      const operators = inputString.replace(/[0-9]|\\./g, '').split('');\n\n      // Calculate the result using the operators in the correct order\n      calculate('÷', operators, numbers, (leftNumber, rightNumber) => leftNumber / rightNumber);\n      calculate('×', operators, numbers, (leftNumber, rightNumber) => leftNumber * rightNumber);\n      calculate('-', operators, numbers, (leftNumber, rightNumber) => leftNumber - rightNumber);\n      // Use of parseFloat to avoid string concatenation\n      calculate('+', operators, numbers, (leftNumber, rightNumber) => parseFloat(leftNumber) + parseFloat(rightNumber));\n\n      return numbers[0];\n    }\n\n    const display = calculateResult(state.result.display);\n    const keyTypes = [KeyType.numeric];\n    const displayStates = [DisplayState.numeric];\n    \n    return {\n      ...state,\n      result: { display, keyTypes, displayStates },\n      calcState: CalcState.resulted,\n      displayState: DisplayState.numeric,\n    };\n  }\n\n  const validCombinations = [\n    DisplayState.numeric + KeyType.numeric,\n    DisplayState.numeric + KeyType.operator,\n    DisplayState.numeric + KeyType.dot,\n\n    DisplayState.dot + KeyType.numeric,\n\n    DisplayState.decimal + KeyType.numeric,\n    DisplayState.decimal + KeyType.operator,\n\n    DisplayState.operator + KeyType.numeric,\n  ];\n\n  if (keyType === KeyType.result) {\n    return calulateResultState(state);\n  }\n  if (keyType === KeyType.clear) {\n    return clearLast(state);\n  }\n  if (\n    (state.calcState === CalcState.cleared\n      || state.calcState === CalcState.resulted)\n    && keyType === KeyType.numeric\n  ) {\n    return initialState(state, keyValue, keyType);\n  }\n\n  const combination = state.displayState + keyType;\n\n  if (validCombinations.includes(combination)) {\n    return concat(state, keyValue, keyType);\n  }\n\n  return state;\n}\n\nexport default calculateState;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Calculator.scss';\nimport { CalcState, KeyType, DisplayState } from './common/enums';\nimport ResultDisplay from './ResultDisplay/ResultDisplay';\nimport CalculatorInput from './CalculatorInput/CalculatorInput';\nimport calculateState from './functions';\n\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleInput = this.handleInput.bind(this);\n\n    this.state = {\n      result: { display: '0', keyTypes: [KeyType.numeric], displayStates: [DisplayState.numeric] },\n      calcState: CalcState.cleared,\n      displayState: DisplayState.numeric,\n      lastKeyType: KeyType.numeric,\n    };\n  }\n\n  handleInput(button) {\n    const state = calculateState(this.state, button.keyValue, button.keyType);\n    this.setState(state);\n  }\n\n  render() {\n    return (\n      <div className=\"Calculator\">\n        <ResultDisplay displayValue={this.state.result.display} />\n        <CalculatorInput onInput={this.handleInput} />\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\nimport Calculator from './components/Calculator/Calculator';\n\nfunction App() {\n  return (\n    <Calculator />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}